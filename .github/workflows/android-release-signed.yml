name: Android Release (signed)

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  JAVA_VERSION: '17'
  ANDROID_NDK_VERSION: '26.3.11579264'
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  ANDROID_HOME: ${{ github.workspace }}/android-sdk

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Pre-create log files (siempre hay artifact)
        run: |
          mkdir -p ci-logs
          : > ci-logs/00-gradle-version.txt
          : > ci-logs/01-clean.log
          : > ci-logs/02-assembleRelease.log
          : > ci-logs/env.txt
          : > ci-logs/sdkmanager-before.txt
          : > ci-logs/sdkmanager-after.txt
          echo "prelog=ok" > ci-logs/exitcode.txt

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      # Instalación MANUAL del SDK + cmdline-tools + NDK
      - name: Install Android SDK/NDK manually (no actions)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "${ANDROID_SDK_ROOT}"
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" | tee -a ci-logs/env.txt

          cd "${ANDROID_SDK_ROOT}"
          curl -L -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q commandlinetools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest

          # Exportar herramientas al PATH de este workflow
          {
            echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin"
            echo "${ANDROID_SDK_ROOT}/platform-tools"
          } >> "$GITHUB_PATH"

          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --list | tee "${GITHUB_WORKSPACE}/ci-logs/sdkmanager-before.txt" || true

          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "build-tools;34.0.0" \
            "platforms;android-34" \
            "ndk;${ANDROID_NDK_VERSION}" \
            | tee -a "${GITHUB_WORKSPACE}/ci-logs/02-assembleRelease.log" || true

          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --licenses | tee -a "${GITHUB_WORKSPACE}/ci-logs/02-assembleRelease.log" || true
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --list | tee "${GITHUB_WORKSPACE}/ci-logs/sdkmanager-after.txt" || true

      - name: Gradle wrapper preflight
        shell: bash
        run: |
          chmod +x gradlew || true
          {
            echo "PWD=$(pwd)"
            echo "JAVA_HOME=$JAVA_HOME"
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}"
            echo "PATH=$PATH"
            echo "ls gradlew:"; ls -l gradlew || true
            echo "ls gradle/wrapper:"; ls -l gradle/wrapper || true
          } >> ci-logs/env.txt

      - name: Gradle properties for CI
        run: |
          cat > gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
          org.gradle.parallel=false
          org.gradle.workers.max=1
          android.useAndroidX=true
          android.enableJetifier=true
          android.enableParallelResourceProcessing=false
          android.aapt2ThreadPoolSize=1
          EOF
          cat gradle.properties >> ci-logs/env.txt

      - name: Gradle version
        run: ./gradlew --version | tee ci-logs/00-gradle-version.txt || true

      - name: Clean
        run: ./gradlew --no-daemon clean | tee ci-logs/01-clean.log || true

      - name: Build (assembleRelease) con logs robustos
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64:      ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD:    ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS:            ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD:         ${{ secrets.ANDROID_KEY_PASSWORD }}
          API_BASE_URL:                 ${{ secrets.API_BASE_URL }}
          BACKUP_PASSPHRASE:            ${{ secrets.BACKUP_PASSPHRASE }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > freyja-release.keystore
          echo "ANDROID_KEYSTORE_PATH=${{ github.workspace }}/freyja-release.keystore" >> $GITHUB_ENV

          set +e
          (
            ./gradlew --no-daemon --stacktrace --info --console=plain \
              -Dorg.gradle.logging.stacktrace=all \
              -Pandroid.injected.signing.store.file="${{ github.workspace }}/freyja-release.keystore" \
              -Pandroid.injected.signing.store.password="${ANDROID_KEYSTORE_PASSWORD}" \
              -Pandroid.injected.signing.key.alias="${ANDROID_KEY_ALIAS}" \
              -Pandroid.injected.signing.key.password="${ANDROID_KEY_PASSWORD}" \
              :app:assembleRelease
          ) > >(tee -a ci-logs/02-assembleRelease.log) 2> >(tee -a ci-logs/02-assembleRelease.log >&2)
          echo $? > ci-logs/exitcode.txt
          set -e
        continue-on-error: true

      - name: Resumen rápido
        if: always()
        run: |
          {
            echo "===== Kotlin errors (e:) ====="
            grep -n "^e: " ci-logs/02-assembleRelease.log || true
            echo
            echo "===== AAPT2 / Android resource linking ====="
            grep -n "AAPT2" ci-logs/02-assembleRelease.log || true
            echo
            echo "===== FAILED TASKS ====="
            grep -n "FAILED" ci-logs/02-assembleRelease.log || true
            echo
            echo "===== Stacktraces breves ====="
            grep -n "at org.gradle" ci-logs/02-assembleRelease.log | head -n 200 || true
          } > ci-logs/SUMMARY.txt

      - name: Subir artifact de logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ci-logs
          if-no-files-found: warn
          compression-level: 6
