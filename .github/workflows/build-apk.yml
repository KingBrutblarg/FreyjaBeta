name: Build & Release APK

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'   # al hacer push de un tag v*, publica un Release

permissions:
  contents: write  # para crear Releases

concurrency:
  group: build-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-22.04
<<<<<<< HEAD

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
=======
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17 (Temurin)
>>>>>>> cefc53e (CI: build & upload debug APK (fixed heredoc))
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
<<<<<<< HEAD
          cmdline-tools: latest
          packages: |
            platforms;android-34
            build-tools;34.0.0
            platform-tools
            ndk;25.1.8937393

      - name: Configure Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Write local.properties
=======
          api-level: 34
          build-tools: "34.0.0"
          cmdline-tools: latest

      - name: Configure Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Create local.properties (point SDK)
>>>>>>> cefc53e (CI: build & upload debug APK (fixed heredoc))
        run: echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties

      # Si tu módulo NO se llama "app", cambia :app:assembleDebug y la ruta de salida
      - name: Build debug APK
        run: ./gradlew --no-daemon :app:assembleDebug

<<<<<<< HEAD
      # Keystore desde secrets -> archivo local y variable de entorno con la ruta
      - name: Write keystore from secret
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
        run: |
          echo "$ANDROID_KEYSTORE_B64" | base64 -d > keystore.jks
          echo "ANDROID_KEYSTORE_PATH=$PWD/keystore.jks" >> $GITHUB_ENV

      # Build de release firmado (APK y AAB)
      - name: Assemble & Bundle release (signed)
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_ALIAS_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}
        run: |
          ./gradlew --no-daemon :app:assembleRelease :app:bundleRelease

      # Artefactos siempre accesibles desde Actions
      - name: Upload APK (release)
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk

      - name: Upload AAB (release)
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: app/build/outputs/bundle/release/app-release.aab

      # Publica un Release solo si fue push de tag (v*)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          name: FreyjaBeta ${{ github.ref_name }}
          body: |
            **FreyjaBeta** ${{ github.ref_name }}
            - APK y AAB firmados generados automáticamente.
          files: |
            app/build/outputs/apk/release/app-release.apk
            app/build/outputs/bundle/release/app-release.aab
=======
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error

      - name: Create GitHub Release (optional)
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_number }}
          name: "Debug build ${{ github.run_number }}"
          files: app/build/outputs/apk/debug/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
>>>>>>> cefc53e (CI: build & upload debug APK (fixed heredoc))
